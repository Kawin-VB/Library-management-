import java.util.*;

class Book {
    String id;
    String title;
    String author;
    boolean isBorrowed;

    public Book(String id, String title, String author) {
        this.id = id;
        this.title = title;
        this.author = author;
        this.isBorrowed = false;
    }

    @Override
    public String toString() {
        return "Book [ID=" + id + ", Title=" + title + ", Author=" + author + ", Is Borrowed=" + isBorrowed + "]";
    }
}

class Borrower {
    String id;
    String name;
    List<Book> borrowedBooks;

    public Borrower(String id, String name) {
        this.id = id;
        this.name = name;
        this.borrowedBooks = new ArrayList<>();
    }

    @Override
    public String toString() {
        return "Borrower [ID=" + id + ", Name=" + name + ", Borrowed Books=" + borrowedBooks + "]";
    }
}

class LibraryManagementSystem {
    List<Book> books;
    List<Borrower> borrowers;
    Map<String, String> transactions; // bookId -> borrowerId

    public LibraryManagementSystem() {
        books = new ArrayList<>();
        borrowers = new ArrayList<>();
        transactions = new HashMap<>();
    }

    public void addBook(String id, String title, String author) {
        books.add(new Book(id, title, author));
    }

    public void addBorrower(String id, String name) {
        borrowers.add(new Borrower(id, name));
    }

    public boolean borrowBook(String bookId, String borrowerId) {
        Book book = findBook(bookId);
        Borrower borrower = findBorrower(borrowerId);

        if (book != null && borrower != null && !book.isBorrowed) {
            book.isBorrowed = true;
            borrower.borrowedBooks.add(book);
            transactions.put(bookId, borrowerId);
            return true;
        }
        return false;
    }

    public boolean returnBook(String bookId, String borrowerId) {
        Book book = findBook(bookId);
        Borrower borrower = findBorrower(borrowerId);

        if (book != null && borrower != null && book.isBorrowed && transactions.get(bookId).equals(borrowerId)) {
            book.isBorrowed = false;
            borrower.borrowedBooks.remove(book);
            transactions.remove(bookId);
            return true;
        }
        return false;
    }

    public Book findBook(String id) {
        for (Book book : books) {
            if (book.id.equals(id)) {
                return book;
            }
        }
        return null;
    }

    public Borrower findBorrower(String id) {
        for (Borrower borrower : borrowers) {
            if (borrower.id.equals(id)) {
                return borrower;
            }
        }
        return null;
    }

    public void displayBooks() {
        for (Book book : books) {
            System.out.println(book);
        }
    }

    public void displayBorrowers() {
        for (Borrower borrower : borrowers) {
            System.out.println(borrower);
        }
    }

    public void displayTransactions() {
        for (Map.Entry<String, String> entry : transactions.entrySet()) {
            System.out.println("Book ID: " + entry.getKey() + ", Borrower ID: " + entry.getValue());
        }
    }

    public static void main(String[] args) {
        LibraryManagementSystem lms = new LibraryManagementSystem();

        // Add books
        lms.addBook("1", "Java Programming", "Author A");
        lms.addBook("2", "Python Programming", "Author B");

        // Add borrowers
        lms.addBorrower("1", "John Doe");
        lms.addBorrower("2", "Jane Doe");

        // Borrow a book
        if (lms.borrowBook("1", "1")) {
            System.out.println("Book borrowed successfully.");
        } else {
            System.out.println("Failed to borrow book.");
        }

        // Return a book
        if (lms.returnBook("1", "1")) {
            System.out.println("Book returned successfully.");
        } else {
            System.out.println("Failed to return book.");
        }

        // Display all books
        lms.displayBooks();

        // Display all borrowers
        lms.displayBorrowers();

        // Display all transactions
        lms.displayTransactions();
    }
}
